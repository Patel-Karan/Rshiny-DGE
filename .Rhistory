install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
library(stringr)
library(dplyr)
install.packages("shiny")
install.packages("ggplot2")
install.packages("plotly")
install.packages("gplots")
install.packages("deseq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library("DESeq2")
BiocManager::install("edgeR")
install.packages("pheatmap")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
q()
shiny::runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
shiny::runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/Heatmap')
runApp('D:/Shiny/demo')
runApp('D:/Shiny/demo')
shiny::runApp('D:/Shiny/Heatmap')
shiny::runApp('D:/Shiny/Heatmap')
shiny::runApp('D:/Shiny/DEG')
runApp('D:/Shiny/DEG')
runApp('D:/Shiny/DEG')
runApp('D:/Shiny/DEG')
runApp('D:/Shiny/DEG')
runApp('D:/Shiny/DEG')
setwd("D:/Shiny/DEG")
names(df2)=gsub(x=names(df2),pattern="_Normalized.Read.Count",replacement="")
shiny::runApp()
options(java.parameters = "-Xmx30g")
library("DESeq2")
d_exp <- function(dframe, nC, nT, hclust_method, dist_method){
countData  <- dframe
nControl <- nC
nCase <- nT
condition <- c(rep("Control",nControl),rep("Case",nCase))
colData <- data.frame(row.names=colnames(countData), condition=factor(condition, levels=c('Control','Case')))
dataset <- DESeqDataSetFromMatrix(countData = countData,colData = colData,design = ~condition)
dds <- DESeq(dataset)
result <- results(dds)
colnames(countData) <- paste(colnames(countData),"Raw.Read.Count", sep = "_")
Normalized_count=(counts(dds, normalized=TRUE))
colnames(Normalized_count) <- paste(colnames(Normalized_count),"Normalized.Read.Count", sep = "_")
res <- data.frame(countData,Normalized_count,result)
res <- res[ order(res$log2FoldChange ), ]
res <- res[, grep('Normalized.Read.Count', names(res))]
names(res)=gsub(x=names(res),pattern="_Normalized.Read.Count",replacement="")
res = res[rowSums(res[])>0,]
clust=t(res)
clust_dist = dist(clust,dist_method)
clust_dist_df = melt(as.matrix(clust_dist), varnames = c("Sample1", "Sample2"),value.name = "Distance")
set.seed(240)
modelname<-hclust(clust_dist, method = hclust_method)
obj <- list(m=modelname,d=clust_dist_df)
return(obj)
}
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggdendro")
runApp()
iris[1:4]
install.packages("ggfortify")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
# OBJECT LIST'S
obj <- list(model_df=list(m=modelname,df=res),distance=clust_dist_df,pca=list(pca_score=scores, p_percent = percent))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
BiocManager::install("DESeq2", version = "1.10.1")
BiocManager::install("DESeq2", version = "1.10")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "1.10")
runApp()
runApp()
runApp()
d_exp <- function(dframe, nC, nT, hclust_method, dist_method){
countData  <- dframe
nControl <- nC
nCase <- nT
condition <- c(rep("Control",nControl),rep("Case",nCase))
colData <- data.frame(row.names=colnames(countData), condition=factor(condition, levels=c('Control','Case')))
dataset <- DESeqDataSetFromMatrix(countData = countData,colData = colData,design = ~condition)
dds <- DESeq(dataset)
result <- results(dds)
colnames(countData) <- paste(colnames(countData),"Raw.Read.Count", sep = "_")
Normalized_count=(counts(dds, normalized=TRUE))
colnames(Normalized_count) <- paste(colnames(Normalized_count),"Normalized.Read.Count", sep = "_")
res <- data.frame(countData,Normalized_count,result, check.names = FALSE)
res <- res[ order(res$log2FoldChange ), ]
res <- res[, grep('Normalized.Read.Count', names(res))]
names(res)=gsub(x=names(res),pattern="_Normalized.Read.Count",replacement="")
res = res[rowSums(res[])>0,]
# CLUSTERING
res_t=t(res)
clust_dist = dist(res_t,dist_method)
clust_dist_df = melt(as.matrix(clust_dist), varnames = c("Sample1", "Sample2"),value.name = "Distance") %>%
filter(Distance != 0) %>% mutate(across(where(is.numeric), round, 2))
set.seed(240)
modelname<-hclust(clust_dist, method = hclust_method)
# PCA
pca <- prcomp(res_t)
scores <- data.frame(pca$x[,1:2], check.names = FALSE)
scores$NAMES <- rownames(scores)
percent <- round((((pca$sdev)^2 / sum(pca$sdev^2))*100)[1:2])
# CORRELATION
pv <- corr.test(res, adjust=cor_adjust)$p
cor_obj <- cor(res)
# OBJECT LIST'S
obj <- list(model_df=list(m=modelname,df=res),
distance=clust_dist_df,
pca=list(pca_score=scores, p_percent = percent),
corr=list(pval = pv, correlation = cor_obj))
return(obj)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggcorplot")
runApp()
install.packages("ggcorrplot")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1.5<NULL
isTRUE(1.5<NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
a <- NULL
is.null(a)
!is.null(a)
runApp()
TRUE == TRUE
runApp()
a <- NULL
!is.null(a)
runApp()
numeric(NULL)
numeric(1)
is.null(a)
!is.null(a)
numeric(0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("scales")
library(scales)
shiny::runApp()
runApp()
-log10(600000)
-log10(5000)
-log10(69.78)
log10(600000)
runApp()
(!is.na(p))
runApp()
runApp()
runApp()
runApp()
data <- read.csv ("C:/Users/karan.patel/Desktop/Control_vs_Case.csv", header =T)
NonSig <- nrow(data %>% filter((!pvalue<0.05)))
NonSig
Sigup <- nrow(data %>% filter(pvalue < 0.05, log2FoldChange > 1))
SigDown <- nrow(data %>% filter(pvalue < 0.05, log2FoldChange < -1))
df <- data.frame(Group=c("Non-Significiant", "Upregulated", "Downregulated"),
Value = c(NonSig,Sigup,SigDown))
df
df <- df %>%
arrange(desc(Group)) %>%
mutate(prop = Value/(sum(df$Value)*100)) %>%
mutate(ypos = cumsum(prop)-(0.5*prop))
ggplot(df, aes(x="", y=prop, fill=Group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
plt <- ggplot(df, aes(x="", y=prop, fill=Group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplotly(plt)
ggplot(df, aes(x="", y=prop, fill=Group)) +
geom_bar(stat="identity", width=1, color="white") +
#coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
plot_ly(data, labels = ~Group, values = ~ypos, type = 'pie')
plot_ly(df, labels = ~Group, values = ~ypos, type = 'pie')
df <- df %>%
arrange(desc(Group)) %>%
mutate(prop = Value/(sum(df$Value)*100)) %>%
mutate(ypos = cumsum(prop))
plot_ly(df, labels = ~Group, values = ~ypos, type = 'pie')
df <- df %>%
arrange(desc(Group)) %>%
mutate(prop = Value/(sum(df$Value)*100)) %>%
mutate(ypos = prop/(max(prop)*100))
df
plot_ly(df, labels = ~Group, values = ~ypos, type = 'pie')
plot_ly(df, labels = ~Group, values = ~Value, type = 'pie')
runApp()
Sig <- nrow(data %>% filter((pvalue<0.05)))
df1 <- data.frame(Group=c("Significant","Non-Significiant"),
Value = c(Sig,NonSig))
df2 <- data.frame(Group=c("Upregulated","Downregulated"),
Value = c(Sigup,SigDown))
df1 <- df1 %>%
arrange(desc(Group)) %>%
mutate(prop = Value/(sum(df1$Value)*100)) %>%
mutate(ypos = prop/(max(prop)*100))
df2 <- df2 %>%
arrange(desc(Group)) %>%
mutate(prop = Value/(sum(df2$Value)*100)) %>%
mutate(ypos = prop/(max(prop)*100))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value)
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value,)
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.25, 0.75), y = c(0, 0.6)))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.25, 0.75), y = c(0, 0.6))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.25, 0.75))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75)) %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75)) %>%
plot_ly() %>%
add_pie(data = df2, labels = ~Group, values = ~Value, domain = c(0.75, 0.75)) %>%
plot_ly() %>%
add_pie(data = df2, labels = ~Group, values = ~Value, domain = c(0.75, 0.75)) %>%
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75))
plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value, domain = c(0.75, 0.75)) %>%
plot_ly() %>%
add_pie(data = df2, labels = ~Group, values = ~Value, domain = c(0.75, 0.75))
plt <- plot_ly() %>%
add_pie(data = df1, labels = ~Group, values = ~Value) %>%
add_pie(data = df2, labels = ~Group, values = ~Value,
domain = list(row = 2, column = 0)) %>%
return(plt)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("D:/US Commercials/ATAC-GEX_Integration/Script.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
res = res[rowSums(res[])>0,]
runApp()
shiny::runApp()
shiny::runApp()
Final <- res[ order(res$log2FoldChange ), ]
shiny::runApp()
install.packages("pedtools")
install.packages("kinship2")
library(kinship2)
data(sample.ped)
View(sample.ped)
pedigree(sample.ped$id, sample.ped$father, sample.ped$mother,
sample.ped$sex,  #affected=sample.ped$affected,
affected=cbind(sample.ped$affected, sample.ped$avail),
famid=sample.ped$ped)
plot(pedAll)
pedAll <- pedigree(sample.ped$id, sample.ped$father, sample.ped$mother,
sample.ped$sex,  #affected=sample.ped$affected,
affected=cbind(sample.ped$affected, sample.ped$avail),
famid=sample.ped$ped)
View(pedAll)
plot(pedAll)
plot(pedAll['1'])
View(sample.ped)
pedigree.legend(ped2, location="topright", radius=.3)
pedigree.legend(pedAll, location="topright", radius=.3)
pedigree.legend(pedAll, location="topright", radius=.3)
pedigree.legend(pedAll, location="bottom", radius=.3)
plot(pedAll['1'])
pedigree.legend(pedAll, location="bottom", radius=.3)
pedigree.legend(pedAll, location="bottomright")
shiny::runApp()
BiocManager::install("reactome.db")
library(reactome.db)
library(reactome.db)
Downprocess <- function(obj,count,comp,cond,norm){
dds <- obj
Normalized_count <- norm
countData <- count
result=results(dds, c(cond, unlist(strsplit(comp,split="_vs_"))[1], unlist(strsplit(comp,split="_vs_"))[1]))
colnames(countData) <- paste(colnames(countData),"Raw.Read.Count", sep = "_")
colnames(Normalized_count) <- paste(colnames(Normalized_count),"Normalized.Read.Count", sep = "_")
Human_Genes  = read.table("/MG/SHARED/RESOURCES/CODE/TRANSCRIPTOME/Genomes/GRCH38/STAR_GRCH38/Gene_Information_Homo_sapiens.GRCh38.87.DESEQ.txt", header=TRUE, row.names=1)
final=(data.frame(Human_Genes,countData,Normalized_count,result,check.names = FALSE))
final_Normal=(data.frame(Human_Genes,countData,Normalized_count,check.names = FALSE))
final_Normal_score=(data.frame(Human_Genes,Normalized_count,check.names = FALSE))
finalNormal_scores=(data.frame("Gene_ID"=rownames(final_Normal_score), final_Normal_score,check.names = FALSE))
final1=(data.frame("Gene_ID"=rownames(final), final,check.names = FALSE))
final_Normali=(data.frame("Gene_ID"=rownames(final_Normal), final_Normal,check.names = FALSE))
ORDERED_all=(final1[ order(final1$log2FoldChange ), ] )
write.table(ORDERED_all,file=paste("Differential_Expression_Genes_DESeq2_",comp,".without.shrinkage.csv",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
resSig <- final1[ which(final1$pvalue < 0.05 ), ]
resSig.final <- resSig[ which(resSig$log2FoldChange >= 1 | resSig$log2FoldChange <=-1  ), ]
ORDERED=( resSig.final[ order( resSig.final$log2FoldChange ), ] )
write.table(ORDERED,file=paste("Significant.Differential_Expression_Genes_DESeq2_",comp,".without.shrinkage.csv",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
ORDERED_all.PC <- ORDERED_all[ which(ORDERED_all$Gene_Biotype == "protein_coding" ), ]
CLUSTRING=ORDERED_all.PC [, grep('Normalized.Read.Count', names(ORDERED_all.PC))]
names(CLUSTRING)=gsub(x=names(CLUSTRING),pattern="_Normalized.Read.Count",replacement="")
write.table(CLUSTRING,file=paste(comp,".PC.txt",sep=""),sep="\t",quote=FALSE)
Volcano=subset(ORDERED_all.PC, select=c("Gene_Name","log2FoldChange", "pvalue"))
Volcano$Significance<- ifelse(Volcano$pvalue < 0.05 & (Volcano$log2FoldChange <=-1 | Volcano$log2FoldChange >=1), "Yes", "No")
Volcano$Significance[is.na(Volcano$Significance)] <- "No"
write.table(Volcano,file=paste(comp,".Volcano.PC.txt",sep=""),sep="\t",quote=FALSE)
write.table(final_Normali,file=paste("RAW.Normalized_Counts_Genes_DESeq2_HTSEQ_",comp,".csv",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
write.table(finalNormal_scores,file=paste("Normalized_Counts_for_score_Genes_DESeq2_HTSEQ_",comp,".csv",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
ORDERED_all[is.na(ORDERED_all)]="N/A"
ORDERED[is.na(ORDERED)]="N/A"
write.xlsx2(ORDERED_all, file=paste("Significant.Differential_Expression_Genes_DESeq2_HTSEQ_",comp,".without.shrinkage.xlsx",sep=""),sheetName="All.Genes", append=FALSE,row.names=FALSE)
write.xlsx2(ORDERED, file=paste("Significant.Differential_Expression_Genes_DESeq2_HTSEQ_",comp,".without.shrinkage.xlsx",sep=""), sheetName="Pvalue < 0.05 & FC +-2", append=TRUE,row.names=FALSE)
}
print("abc")
install.packages("httr")
librray(httr)
libray(httr)
library(httr)
shiny::runApp()
